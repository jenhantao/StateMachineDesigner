/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SimulatorFrame.java
 *
 * Created on Jul 19, 2011, 10:52:39 PM
 */
package statemachinedesigner;

import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;

/**
 *
 * @author Henry
 */
public class SimulatorFrame extends javax.swing.JFrame {

    /** Creates new form SimulatorFrame */
    public SimulatorFrame() {
        _controller = new SimulatorController(this);
        initComponents();
        _designInputModel = new DefaultListModel();
        wordList.setModel(_designInputModel);

//        EditorApplet editPanel = new EditorApplet(_controller);
//              designInputPanel.setLayout(new BorderLayout());
//        designInputPanel.add(editPanel.getContentPane(), BorderLayout.CENTER);
//        _gda = _controller.getGDA();
        _gda = new GraphDisplayApplet();
        _gda.init();

        designInputPanel.setLayout(new BorderLayout());
        designInputPanel.add(_gda.getContentPane(), BorderLayout.CENTER);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTabbedPane = new javax.swing.JTabbedPane();
        testPanel = new javax.swing.JPanel();
        testInputScrollPane = new javax.swing.JScrollPane();
        designTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        testResultsScrollPane = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        runSimulationButton = new javax.swing.JButton();
        intermediateStepsCheckbox = new javax.swing.JCheckBox();
        finalReportersCheckbox = new javax.swing.JCheckBox();
        statusLabel = new javax.swing.JLabel();
        useRecombinaseCheckBox = new javax.swing.JCheckBox();
        useInvertaseCheckBox = new javax.swing.JCheckBox();
        designPanel = new javax.swing.JPanel();
        inputTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        wordList = new javax.swing.JList();
        designInputPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        generateButton = new javax.swing.JButton();
        generateButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        designResultArea = new javax.swing.JTextArea();
        designStatusTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        designTextArea.setColumns(20);
        designTextArea.setRows(5);
        testInputScrollPane.setViewportView(designTextArea);

        jLabel1.setText("Design");

        jLabel2.setText("Results");

        resultsTextArea.setColumns(20);
        resultsTextArea.setEditable(false);
        resultsTextArea.setRows(5);
        testResultsScrollPane.setViewportView(resultsTextArea);

        runSimulationButton.setText("Run Simulation");
        runSimulationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runSimulationButtonActionPerformed(evt);
            }
        });

        intermediateStepsCheckbox.setText("Show intermediate steps");

        finalReportersCheckbox.setSelected(true);
        finalReportersCheckbox.setText("All Reporters final");

        statusLabel.setText("Status: waiting...");
        statusLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        useRecombinaseCheckBox.setSelected(true);
        useRecombinaseCheckBox.setText("Simulate Excision");
        useRecombinaseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useRecombinaseCheckBoxActionPerformed(evt);
            }
        });

        useInvertaseCheckBox.setText("Simulate Inversion");
        useInvertaseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useInvertaseCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout testPanelLayout = new javax.swing.GroupLayout(testPanel);
        testPanel.setLayout(testPanelLayout);
        testPanelLayout.setHorizontalGroup(
            testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testPanelLayout.createSequentialGroup()
                .addGroup(testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(testPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(testResultsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                            .addComponent(testInputScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                            .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)))
                    .addGroup(testPanelLayout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(useRecombinaseCheckBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(finalReportersCheckbox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(testPanelLayout.createSequentialGroup()
                                .addComponent(intermediateStepsCheckbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                                .addComponent(runSimulationButton))
                            .addComponent(useInvertaseCheckBox))))
                .addContainerGap())
        );
        testPanelLayout.setVerticalGroup(
            testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(testInputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(testResultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(statusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useRecombinaseCheckBox)
                    .addComponent(useInvertaseCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runSimulationButton)
                    .addComponent(finalReportersCheckbox)
                    .addComponent(intermediateStepsCheckbox))
                .addContainerGap())
        );

        mainTabbedPane.addTab("Test", testPanel);

        inputTextField.setToolTipText("Use only integers and space characters");
        inputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTextFieldActionPerformed(evt);
            }
        });
        inputTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputTextFieldKeyTyped(evt);
            }
        });

        wordList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        wordList.setToolTipText("the list of words that the designed state machine will recognize");
        jScrollPane3.setViewportView(wordList);

        designInputPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        designInputPanel.setPreferredSize(new java.awt.Dimension(500, 203));

        javax.swing.GroupLayout designInputPanelLayout = new javax.swing.GroupLayout(designInputPanel);
        designInputPanel.setLayout(designInputPanelLayout);
        designInputPanelLayout.setHorizontalGroup(
            designInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
        );
        designInputPanelLayout.setVerticalGroup(
            designInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 199, Short.MAX_VALUE)
        );

        addButton.setText("Add");
        addButton.setToolTipText("add a word to the wordlist");
        addButton.setMaximumSize(new java.awt.Dimension(90, 25));
        addButton.setMinimumSize(new java.awt.Dimension(90, 25));
        addButton.setPreferredSize(new java.awt.Dimension(90, 25));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        addButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addButtonKeyTyped(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.setToolTipText("remove selected words");
        removeButton.setMaximumSize(new java.awt.Dimension(90, 25));
        removeButton.setMinimumSize(new java.awt.Dimension(90, 25));
        removeButton.setPreferredSize(new java.awt.Dimension(90, 25));
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        generateButton.setText("Generate");
        generateButton.setToolTipText("Generate a new design");
        generateButton.setMaximumSize(new java.awt.Dimension(90, 25));
        generateButton.setMinimumSize(new java.awt.Dimension(90, 25));
        generateButton.setPreferredSize(new java.awt.Dimension(90, 25));
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        generateButton1.setText("switch syntax");
        generateButton1.setToolTipText("Generate a new design");
        generateButton1.setMaximumSize(new java.awt.Dimension(90, 25));
        generateButton1.setMinimumSize(new java.awt.Dimension(90, 25));
        generateButton1.setPreferredSize(new java.awt.Dimension(90, 25));
        generateButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Status: ");

        jLabel5.setText("Input");

        jLabel6.setText("Inputs Added");

        jLabel3.setText("Result:");

        designResultArea.setColumns(20);
        designResultArea.setRows(5);
        designResultArea.setPreferredSize(new java.awt.Dimension(166, 113));
        jScrollPane1.setViewportView(designResultArea);

        designStatusTextArea.setColumns(20);
        designStatusTextArea.setEditable(false);
        designStatusTextArea.setFont(new java.awt.Font("Monospaced", 0, 10));
        designStatusTextArea.setRows(5);
        designStatusTextArea.setPreferredSize(new java.awt.Dimension(500, 94));

        javax.swing.GroupLayout designPanelLayout = new javax.swing.GroupLayout(designPanel);
        designPanel.setLayout(designPanelLayout);
        designPanelLayout.setHorizontalGroup(
            designPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(designPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(designPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(designPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel6))
                    .addComponent(jLabel5)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(designPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(designPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addComponent(designInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(designPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, designPanelLayout.createSequentialGroup()
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(generateButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                        .addComponent(inputTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE))
                    .addComponent(designStatusTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        designPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addButton, generateButton, generateButton1, removeButton});

        designPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel3, jLabel4, jLabel5, jLabel6});

        designPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {designInputPanel, designStatusTextArea, inputTextField, jScrollPane1, jScrollPane3});

        designPanelLayout.setVerticalGroup(
            designPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(designPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(designPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(designPanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(designPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(generateButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(designPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(designPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(designPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(designStatusTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(designInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(designPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap())
        );

        designPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addButton, inputTextField});

        mainTabbedPane.addTab("Design", designPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public GraphDisplayApplet getGDA() {
        return _gda;
    }

    public boolean isFinalReporter() {
        return finalReportersCheckbox.isSelected();
    }

    public boolean isShowIntermediate() {
        return intermediateStepsCheckbox.isSelected();
    }
    private void runSimulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runSimulationButtonActionPerformed
        //input will have components split by spaces;
        //p# will denote a promoter
        //@# denotes an invertase coding region
        //I# will denote an invertase site
        //' will denote an inverted site, otherwise components are assumed to have normal orientation
        //simulation is not case sensitive; interally converted to lower case
        resultsTextArea.setText("");
        String result = _controller.startSimulation(designTextArea.getText());
        resultsTextArea.setText(result);

    }//GEN-LAST:event_runSimulationButtonActionPerformed

    private void inputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputTextFieldActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String toAdd = inputTextField.getText();
        if (toAdd != null) {
            toAdd = toAdd.trim();
            toAdd = addDesignInput(toAdd);
            if (toAdd.contains("invalid")) {
                designStatusTextArea.setText(toAdd);
            } else {
                _designInputModel.addElement(toAdd);
                inputTextField.setText("");
                designStatusTextArea.setText("added: " + toAdd);

            }
            inputTextField.requestFocus();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int[] indices = wordList.getSelectedIndices();
        if (indices.length > 0) {
            if (designStatusTextArea.getText().contains("added") || designStatusTextArea.getText().contains("invalid")) {
                designStatusTextArea.setText("");
            }
            for (int i = 0; i < indices.length; i++) {
                String toAdd = removeDesignInput((String) _designInputModel.get(indices[i] - i));

                _designInputModel.remove(indices[i] - i);
                if (toAdd.contains("invalid")) {
                    designStatusTextArea.append(toAdd + "\n");
                } else {
                    designStatusTextArea.append("removed: " + toAdd + "\n");
                }
            }
            int index = indices[indices.length - 1] - indices.length + 1;
            wordList.setSelectedIndex(index);
            wordList.ensureIndexIsVisible(index);
            indices = null;
        }


    }//GEN-LAST:event_removeButtonActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        String design = _controller.generateDesign(_gda.getModel());
        if (design != null) {
            if (design.contains("error")) {
                designStatusTextArea.setText(design);
            } else {
                designResultArea.setText(design);
            }
        }
    }//GEN-LAST:event_generateButtonActionPerformed
    private void generateButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButton1ActionPerformed
        String design = designResultArea.getText();
        if(design.length()<1) {
            designResultArea.setText("Please genearte a design first");
        } else {
            designResultArea.setText(_controller.translateSwap(design));
        }
    }//GEN-LAST:event_generateButton1ActionPerformed

private void useRecombinaseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useRecombinaseCheckBoxActionPerformed
    _controller.changeRecombinaseUse();
}//GEN-LAST:event_useRecombinaseCheckBoxActionPerformed

private void useInvertaseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useInvertaseCheckBoxActionPerformed
    _controller.changeInvertaseUse();
}//GEN-LAST:event_useInvertaseCheckBoxActionPerformed

private void addButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addButtonKeyTyped
// TODO add your handling code here:
}//GEN-LAST:event_addButtonKeyTyped

private void inputTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputTextFieldKeyTyped
    if (evt.getKeyChar() == ' ' &&  inputTextField.getText().split("\\s").length>2) {
        String toAdd = inputTextField.getText();
        if (toAdd != null) {
            toAdd = toAdd.trim();
            toAdd = addDesignInput(toAdd);
            if (toAdd.contains("invalid")) {
                designStatusTextArea.setText(toAdd);
            } else {
                _designInputModel.addElement(toAdd);
                inputTextField.setText("");
                designStatusTextArea.setText("added: " + toAdd);

            }
            inputTextField.requestFocus();
        }
            evt.consume();

    }
}//GEN-LAST:event_inputTextFieldKeyTyped
    public void setTestStatus(String s) {
        statusLabel.setText(s);
    }

    public void setDesignStatus(String s) {
        designStatusTextArea.setText(s);
    }

    /**
     * validates words that need to be incorporated into the design
     * returns either a blank string or a valid design input composed of integers and spaces only
     * @return
     */
    public String addDesignInput(String s) {

        s = s.replace("  ", " ");//remove extra spaces
        String[] tokens = s.split("\\s");
        if (tokens.length == 3) {
            int source = -1;
            int dest = -1;
            try {
                source = Integer.parseInt(tokens[0]);
                dest = Integer.parseInt(tokens[1]);
            } catch (NumberFormatException e) {
                setDesignStatus("Error- source or destination is invalid");
                return "invalid input: source or destination is invalid";
            }
            if (source > -1 && dest > -1) {
                _gda.createEdge(source, dest, tokens[2]);

                return s; //valid input
            } else {
                setDesignStatus("invalid input: valid input is 3 integers separated by a space");
                return "invalid input: valid input is 3 integers separated by a space";
            }

        } else {
            setDesignStatus("invalid input: too many characters in input");
            return "invalid input: too many characters in input";
        }
    }

    public String removeDesignInput(String s) {
        String[] tokens = s.split("\\s");
        if (tokens.length == 3) {
            int source = -1;
            int dest = -1;
            try {
                source = Integer.parseInt(tokens[0]);
                dest = Integer.parseInt(tokens[1]);
            } catch (NumberFormatException e) {
                setDesignStatus("invalid input: source or destination is not valid");
                return "invalid input: source or destination is not valid";
            }
            String weight = tokens[2];
            if (source > -1 && dest > -1) {

                _gda.removeEdge(source, dest, weight);

                return s; //valid input
            } else {
                setDesignStatus("invalid input: source or destination is not valid");
                return "invalid input: source or destination is not valid";
            }

        } else {
            setDesignStatus("invalid input: valid input is 3 integers separated by a space");

            return "invalid input: valid input is 3 integers separated by a space";
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SimulatorFrame().setVisible(true);
            }
        });
    }
    private GraphDisplayApplet _gda;
    private DefaultListModel _designInputModel;
    private SimulatorController _controller;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel designInputPanel;
    private javax.swing.JPanel designPanel;
    private javax.swing.JTextArea designResultArea;
    private javax.swing.JTextArea designStatusTextArea;
    private javax.swing.JTextArea designTextArea;
    private javax.swing.JCheckBox finalReportersCheckbox;
    private javax.swing.JButton generateButton;
    private javax.swing.JButton generateButton1;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JCheckBox intermediateStepsCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextArea resultsTextArea;
    private javax.swing.JButton runSimulationButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JScrollPane testInputScrollPane;
    private javax.swing.JPanel testPanel;
    private javax.swing.JScrollPane testResultsScrollPane;
    private javax.swing.JCheckBox useInvertaseCheckBox;
    private javax.swing.JCheckBox useRecombinaseCheckBox;
    private javax.swing.JList wordList;
    // End of variables declaration//GEN-END:variables
}
